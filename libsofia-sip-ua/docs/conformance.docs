/*  -*- html -*- */
/**

@page sofia_sip_conformance SIP and SDP Protocol Features in Sofia-SIP

<table border=1 cellpadding=4 cellspacing=0>
<tr>
   <th>Feature</th>
   <th>Supported</td>
   <th>Notes</td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3261: Basic SIP Protocol
    </th>
    <td>
	The SIP registration and dialog level implementation enables the
	application to operate as a SIP UA, SIP proxy or a redirect server
	according to the @RFC3261.

	The @RFC3261 functionality is divided into five layers: 
	-# message syntax and encoding 
	-# transport 
	-# transaction
	-# transaction user (UAS and UAC cores, proxy core)
	-# SIP elements: user agent client and server, proxies,
	   registrars
    </td>
    <td>
        &nbsp;
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3261 Sections&nbsp;19&nbsp;and&nbsp;20:<br>
	Syntax and encoding
    </td>
    <td>
	The supported @RFC3261 methods are: @b REGISTER, @b OPTIONS, @b
	INVITE, @b ACK, @b CANCEL, @b BYE, as well as methods @b
	INFO, @b PRACK, @b SUBSCRIBE, @b NOTIFY, @b UPDATE, @b MESSAGE, and
	@b PUBLISH.

	The SIP headers supported (generating, parsing and syntax checking)
	are:

	@ref sip_accept "Accept",
	@ref sip_accept_encoding "Accept-Encoding",
	@ref sip_accept_language "Accept-Language",
	@ref sip_allow "Allow",
	@ref sip_authentication_info "Authentication-Info",
	@ref sip_authorization "Authorization", 
	@ref sip_call_id "Call-ID (i)",
	@ref sip_call_info "Call-Info",
	@ref sip_contact "Contact (m)",
	@ref sip_content_disposition "Content-Disposition",
	@ref sip_content_language "Content-Language",
	@ref sip_content_length "Content-Length (l)",
	@ref sip_content_type "Content-Type (c)",
	@ref sip_cseq "CSeq",
	@ref sip_date "Date",
	@ref sip_error_info "Error-Info",
	@ref sip_expires "Expires",
	@ref sip_from "From (f)",
	@ref sip_in_reply_to "In-Reply-To",
	@ref sip_max_forwards "Max-Forwards",
	@ref sip_min_expires "Min-Expires",
	@ref sip_mime_version "MIME-Version",
	@ref sip_organization "Organization",
	@ref sip_priority "Priority",
	@ref sip_proxy_authenticate "Proxy-Authenticate", 
	@ref sip_proxy_authorization "Proxy-Authorization", 
	@ref sip_proxy_require "Proxy-Require",
	@ref sip_record_route "Record-Route",
	@ref sip_require "Require",
	@ref sip_retry_after "Retry-After",
	@ref sip_route "Route",
	@ref sip_server "Server",
	@ref sip_subject "Subject (s)",
	@ref sip_supported "Supported (k)",
	@ref sip_timestamp "Timestamp",
	@ref sip_to "To (t)",
	@ref sip_unsupported "Unsupported",
	@ref sip_user_agent "User-Agent",
	@ref sip_via "Via (v)",
	@ref sip_warning "Warning", and
	@ref sip_www_authenticate "WWW-Authenticate".

	Unknown headers (extension headers) are supported and can be passed
	to/received from application as name-value pairs.

	It is possible to extend SIP parser in run-time with header-specific
        parsers.
    </td>
    <td>
    	- Unsupported headers:
	  Alert-Info, 
	  @ref sip_content_encoding "Content-Encoding (e)",
	  Reply-To
	- Automatic escaping of reserved characters has not been implemented.
   </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3261 Section 18:<br>
	UDP and TCP transports
    </th>
    <td>
        UDP and TCP on both IP4 and IP6 are supported. 
   
        UDP size limit of 1300 bytes is enforced by default. If limit is
	exceeded, TCP is tried instead. If TCP connection is refused, UDP is
	tried if message size is less than 64 K. Limit is adjustable via
	parameter NTATAG_UDP_MTU().

	TCP connections are reused by client. However, server closes
	connections after idle time of 30 minutes (by default). 

	Server tries to use same TCP connection to return response as it did
	receive request.

	Only one SIP message is accepted per UDP message, as per @RFC3261.
    </td>
    <td>
	- There is experimental support for SCTP, too.
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3261 Section 17:<br> Transactions
    </th>
    <td>
        Transaction state engines function as specified in @RFC3261 section
	17. There is special handling of methods @b INVITE, @b ACK, @b
	CANCEL. There are two modes for transaction state engines,
	User-Agent and Proxy modes.

	Default values for SIP timers are those specified by @RFC3261. The
	defaults for T1, T1x64, T2 and T4 can be changed via configuration tags.
    </td>
    <td>
    </td>
</tr>


<tr valign=top>
    <th align="left">
	@RFC3261 Section 26:<br> Security 
    </th>
    <td>
        TLS and SIPS URIs has been implemented. Currently, TLS does not
	require certificate from client nor it does check it if one is
	provided.
    </td>
    <td>
	Missing:
	- TLS certificate checking
	- S/MIME
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC2617: HTTP Digest Authentication
    </th>
    <td>
	Sofia-SIP an authentication client and server modules implementing
        HTTP Digest authentication. 

	HTTP Digest is a simple challenge-response authentication
	scheme defined in @RFC2617 based on the UA sending a checksum
	calculated over specific values in response to a challenge sent by
	the server (proxy or UA).

        Checksum calculation supports MD5 (@RFC1321), with
        @RFC2069-compatible, MD5 and MD5sess algorithms. The
        quality-of-protection (qop) parameters "auth", "auth-int" and none
        (missing) are supported. The "opaque" parameter is supported.

	The SIP authentication headers supported (generating, parsing and
	syntax checking) are: 
	@ref sip_authorization "Authorization", 
	@ref sip_authentication_info "Authentication-Info",
	@ref sip_proxy_authenticate "Proxy-Authenticate", 
	@ref sip_proxy_authentication_info "Proxy-Authentication-Info",
	@ref sip_proxy_authorization "Proxy-Authorization", and
	@ref sip_www_authenticate "WWW-Authenticate".

	SIP interface to the modules is implemented as defined in @RFC3261
	(sections 8.1.3.5, 22.2, 22.3, 22.4).

	An @RFC2617 header @ref sip_proxy_authentication_info
        "Proxy-Authentication-Info" is not listed in @RFC3261 but
        it is nevertheless supported by Sofia-SIP.
    </td>
    <td>
	Missing:
	- Mutual authentication
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3263: Locating SIP Servers
    </th>
    <td>
	Support for SIP server address resolution from SIP or SIPS URI using
	NAPTR, SRV, A or AAAA records in DNS as defined in @RFC3263.
    </td>
    <td>
	- Resolving any other types of URIs than SIP or SIPS URIs, e.g., IM:
	or PRES: URIs.
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC2806: tel URI
    </th>
    <td>
	Handling of any URI type.
    </td>
    <td>
	Missing:
	- Using the tel: URIs with SIP.
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3327: Path
    </th>
    <td>
	User-agent engine can add "path" option tag to Supported header of
	REGISTER requests.

	The SIP header explicitly supported (generating, parsing and
	syntax checking) is: 
	- @ref sip_path "Path".
    </td>
    <td>
	&nbsp;
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3329:
	Security Agreement
    </th>
    <td>
	Some support of the SIP Security Mechanism Agreement procedures. The
	client is able to insert Security-Client and Security-Verify header
	with fake @e d-ver value.

	The SIP headers explicitly supported (generating, parsing
	and syntax checking) are: 
	@ref sip_security_client "Security-Client",
	@ref sip_security_server "Security-Server", and
	@ref sip_security_verify "Security-Verify",

	Security-mechanism supported is "digest".
    </td>
    <td>
	Missing:
	- Calculating correct @e d-ver value
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3486: SIP Compression
    </th>
    <td>
	Support for using comp=sigcomp parameters in @ref sip_via "Via"
	header and @ref url_t "SIP URIs" for indicating support for
	compression.
    </td>
    <td>
	- SigComp itself is not supported.
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3608: Service Route
    </th>
    <td>
	Support for SIP extension header field that can be used to provide a
	mechanism by which a registrar may inform a registering UA of a
	service route. User-Agent can use the route provided in Service-Route.

	The SIP header explicitly supported (generating, parsing and
	syntax checking) is @ref sip_service_route "Service-Route".
    </td>
    <td>
	&nbsp;
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3840: Capabilities
    </th>
    <td>
	Feature parameters can be added to SIP profiles and sent within
	Contact header of REGISTER request as header parameters.

	UAC can optionally generate media tags fro Contact header using
	local media profile.
			
	Feature parameters can also be sent within any other SIP request as
	extension parameters of Contact header.
    </td>
    <td>
	Missing:
        - Processing the feature parameters received in the Contact header
    </td>
</tr>


<tr valign=top>
    <th align="left">
	@RFC3841: Caller Preferences
    </th>
    <td>
	Built-in support for user-agent behavior. 

	UAC can optionally generate Accept-Contact header using local media profile.

	SIP parser parses the Accept-Contact and Reject-Contact headers.

        ACK and CANCEL request messages sent have same values
	for Accept-Contact/Reject-Contact or Request-Disposition
	headers as the original request had.

	There are functions for calculating score for contacts.

	The SIP headers explicitly supported (generating,
	parsing and syntax checking) are: 
	@ref sip_request_disposition "Request-Disposition (d)",
	@ref sip_accept_contact "Accept-Contact (a)",
	@ref sip_reject_contact "Reject-Contact (j)",
    </td>
    <td>
	Missing:
        - UAS processing incoming Accept-Contact or Reject-Contact headers
    </td>
</tr>


<tr valign=top>
    <th align="left">
	@RFC2976: INFO
    </th>
    <td>
	INFO method is supported within a dialog.
    </td>
    <td>
	Not implemented:
	- Generating or processing contents of INFO requests 
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3262: PRACK and 100rel
    </th>
    <td>
	PRACK method is supported within dialog as defined in RFC3262.
        Semantics of reliable provisional responses are supported: 
        - including 100rel Required header in provisional responses if 
          request had 100rel 
	- generation of PRACK based on 100rel option tag in Require header of
	  a provisional response, and
        - automatic re-transmission of provisional responses.
	
	The SIP headers supported (generating, parsing and syntax checking)
	are @ref sip_rseq "RSeq" and @ref sip_rack "RAck".
    </td>
    <td>
	&nbsp; 
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3264: SDP Offer/Answer
    </th>
    <td>
	Generating and processing offers or answers.
    </td>
    <td>
	- Taking "a=fmtp" parameters into account when generating or
	  processing answer
    </td>
</tr>

<tr valign=top>
    <th align="left" align="left">
	@RFC2327: SDP (Session Description Protocol)
    </th>
    <td>
	Generic support (generating, parsing and syntax checking) for SDP.
	The SDP
        @ref sdp_version_t "v=",
        @ref sdp_origin_t "o=",
	@ref sdp_connection_t "c=",
	@ref sdp_bandwidth_t "b=",
	@ref sdp_time_t "t=",
	@ref sdp_repeat_t "r=",
	@ref sdp_zone_t "z=",
	@ref sdp_key_t "k=",
	@ref sdp_attribute_t "a=", and
	@ref sdp_media_t "m=" 
        lines are separated and parsed. The "e=", "p=", "s=", and "i=" lines
	are separated.

	The attributes "a=sendrecv", "a=sendonly", "a=recvonly",
	"a=inactive", @ref sdp_rtpmap_s "a=rtpmap", and "a=fmtp" are parsed.

	The implementation tries to follow draft-ietf-mmusic-sdp-new-25,
	draft Internet Standard for SDP in progress.
    </td>
    <td>
	&nbsp;
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3266: IP6 in SDP
    </th>
    <td>
	Representation of IP6 addresses within SDP message.
    </td>
    <td>
	&nbsp;
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3265: SIP Event Notifications
    </th>
    <td>
	SIP extensions for subscribing and processing asynchronous event
	notifications as defined in @RFC3265.
			
	Includes dialog level support for sending and refreshing SUBSCRIBE
	and receiving NOTIFY messages.
			
	The SIP headers explicitly supported (generating, parsing and
	syntax checking) are
        @ref sip_event "Event", 
	@ref sip_allow_events "Allow-Events", and
        @ref sip_subscription_state "Subscription-State"
			
	Note: currently there is no support for forked SUBSCRIBE requests.
    </td>
    <td>
	- Subscribing, generating or processing specific event types
          and interpreting the content of event data is up to application
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3903: PUBLISH
    </th>
    <td>
	PUBLISH method is supported natively. The SIP headers
	explicitly supported (generating, parsing and syntax checking) are
	@ref sip_etag "SIP-ETag" and @ref sip_if_match "SIP-If-Match".

	The nua_publish() will keep published data refreshed until
	nua_unpublish() is called.
    </td>
    <td>
	&nbsp;
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3311: UPDATE
    </th>
    <td>
	UPDATE method as defined in RFC3311. UPDATE allows a client to
	update parameters of a session (such as the set of media streams and
	their codecs) even within early dialogs.

	Offer-Answer negotiation with UPDATE is implemented in nua.
    </td>
    <td>
        - Currently, nua stack does not automatically generate UPDATE requests
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3312: Preconditions
    </th>
    <td>
	SDP syntax: construction and parsing SDP messages.
    </td>
    <td>
	- Semantics and handling of preconditions
	- Reservation of resources
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3313: Media Authentication
    </th>
    <td>
	P-Media-Authorization header is supported as an 
	 @ref sip_unknown "extension header".
    </td>
    <td>
        Application 
	- Passing the authorization token to QoS reservation request
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3323: Privacy
    </th>
    <td>
	Call-Id header is generated from cryptographically random id without
	host name or IP address. By default, @ref sip_contact "Contact" and
	@ref sip_via "Via" headers contain only IP address that can be
	dynamically allocated.
			
	Application can enter any SIP URI and display name to From header,
	e.g., <tt>Anonymous &lt;sip:anonymous@example.org&gt;</tt>.
			
	@ref sip_privacy "Privacy" header is supported (generating, parsing
        and syntax checking).
    </td>
    <td>
	- Population of the URIs and display names within SIP headers
	- Not to include any optional headers that could reveal identity
	- Generating of Privacy header with appropriate values
	- Generating of Proxy-Require: privacy
	- Usage of anonymous callback URIs etc.
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3326: Reason
    </th>
    <td>
	Reason header is supported as an extension header.
    </td>
    <td>
	- Generating or processing Reason headers
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3407: Capability Declaration
    </th>
    <td>
	Generic support for attribute lines that conform SDP
	syntax
    </td>
    <td>
	- Defining sqn, cdsc, cpar etc. strings needed in a= line
	- Generating or processing the attribute lines
	- Capability negotiation itself
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3420: message/sipfrag
    </th>
    <td>
	Passing the received SIP message headers to application that can
	create the sipfrag.
	
	When nua_invite() is given a nua handle in NUTAG_NOTIFY_REFER()
	minimal notifications using message/sipfrag format are automatically
	generated.
    </td>
    <td>
        Application must take care of:
	- processing the SIP message fragments
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3428: MESSAGE
    </th>
    <td>
	MESSAGE method is supported.
    </td>
    <td>
	&nbsp;
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3515: REFER
    </th>
    <td>
	REFER method is processed and NOTIFY generated automatically by
	protocol actions when nua_invite() is given referrer's nua
	handle in NUTAG_NOTIFY_REFER().
			
	The SIP headers explicitly supported (generating, parsing and
	syntax checking) are @ref sip_refer_to "Refer-To (r)",
	@ref sip_referred_by "Referred-By (b)", and 
	@ref sip_replaces "Replaces".
    </td>
    <td>
        Application must take care of:
	- Generating Replaces header from a dialog or matching a dialog with
	Replaces.
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3857: "winfo"
    </th>
    <td>
	Sofia-SIP supports generic SIP dialog level support for subscribing
	SIP event packages and receiving notifications for them. 
	Subscriptions are refreshed before expiration when needed and
	subscriptions are terminated on request.
    </td>
    <td>
        Application must take care of:
	- Generating subscriptions for winfo event
	- Processing notifications for winfo event:
	  - Handling of notified presence information
	  - Handling of notified subscription states
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3858: winfo format
    </th>
    <td>
	Generic support for sending and receiving text-based bodies within
	SIP requests
    </td>
    <td>
        Application must take care of:
	- Processing of watcher info XML documents
    </td>
</tr>


<tr valign=top>
    <th align="left">
	@RFC3892: Referred-By
    </th>
    <td>
	@ref sip_referred_by "Referred-By" header is explicitly supported
	(generating, parsing and syntax checking).
			
	Referred-by token can be sent and received in
	text-based SIP message body.
    </td>
    <td>
        Application must take care of:
	- Generating or processing @ref sip_referred_by "Referred-By" headers
	- Generating (and encrypting) or verifying (and decrypting) of
	  Referred-by tokens
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC4028: session timers
    </th>
    <td>
	The SIP session-timer ("timer") extension is supported.

        The SIP headers explicitly supported (generating, parsing and
	syntax checking) are @ref sip_session_expires "Session-Expires (x)" and
	@ref sip_min_se "Min-SE".
    </td>
    <td>
	&nbsp;
    </td>
</tr>

</table>

*/

/*
	@ref sip_path "Path",

	@ref sip_reason "Reason",


	@ref sip_privacy "Privacy",

	/* Caller Preferences */
	@ref sip_request_disposition "Request-Disposition (d)",
	@ref sip_accept_contact "Accept-Contact (a)",
	@ref sip_reject_contact "Reject-Contact (j)",


	@ref sip_etag "SIP-ETag",
	@ref sip_if_match "SIP-If-Match",


	/* @RFC3265 */
	@ref sip_event "Event (o)",
	@ref sip_allow_events "Allow-Events (u)",
	@ref sip_subscription_state "Subscription-State",




<tr valign=top>
    <th align="left">
	@RFC3319: (DHCPv6)
    </th>
    <td>
	DHCPv6 option for locating SIP servers
    </td>
    <td>
	&nbsp;
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3361: DHCPv4
    </th>
    <td>
	DHCPv4 option for locating SIP servers
    </td>
    <td>
	&nbsp;
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3320: SigComp
    </th>
    <td>
    	Support for using SigComp for compression and
	decompression of SIP/SDP messages. By default, dynamic
	compression is used.

	Decompression using UDVM
    </td>
    <td>
	&nbsp;
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3321: SigComp Extended operations
    </th>
    <td>
	Support for SigComp extended operations.
    </td>
    <td>
	- Explicit Acknowledgment Scheme
	- Shared Compression
	- Checkpoint State
	- Implicit Deletion for Dictionary Update
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3325: Asserted Identity
    </th>
    <td>
	Explicit support (generating, parsing and syntax checking) for the
	following SIP headers: P-Asserted-Identity, P-Preferred-Identity
    </td>
    <td>
	- Recognizing trust domains and enforcing handling of headers
	  based on those
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3388: (grouping of media lines)
    </th>
    <td>
	mid, group, LS and FID are predefined strings to be
	used within attribute line
    </td>
    <td>
	- Generating or processing the attribute lines
	- Grouping the media for transport accordingly
    </td>
</tr>


<tr valign=top>
    <th align="left">
	@RFC3485: SIP/SDP Dictionary
    </th>
    <td>
	Support for SigComp static compression using SIP/SDP
	dictionary.
    </td>
    <td>
	&nbsp;
    </td>
</tr>


<tr valign=top>
    <th align="left">
	@RFC3680: @b "reg" event
    </th>
    <td>
	3GPP IMS profiles defined for UA will SUBSCRIBE registration state
	event package after sending initial REGISTER to IMS network. Profile
	will maintain registration state machine according to NOTIFY payloads
	received from IMS network
    </td>
    <td>
	- Implicitly registered user identities
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3524 (SRF)
    </th>
    <td>
	Sofia-SIP has generic support for attribute lines that conform SDP syntax
    </td>
    <td>
	- Defining SRF string needed in a= line
	- Generating or processing the attribute lines
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3556: Bandwidth
    </th>
    <td>
	Sofia-SIP has generic support for bandwidth modifiers that conform SDP syntax.
    </td>
    <td>
	- Generating or processing RS and RR bandwidth modifiers
	- Semantics of bandwidth allocation
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3605: RTCP attribute
    </th>
    <td>
	Sofia-SIP has generic support for attribute lines that conform SDP syntax.
    </td>
    <td>
	- Discovering port numbers
	- Generating or processing the RTCP attribute lines
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3824: ENUM
    </th>
    <td>
	Tel URIs are supported for To, From, Contact headers and R-URI of
	the outgoing SIP request provided that:
			
	- The next hop is given as IP address or SIP URI
			
	- A proxy in the network can resolve E.164 numbers by ENUM

	<B>Note</B>: stack can not resolve E.164 number to address of next
	hop.
    </td>
    <td>
	&nbsp;
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3842: MSG waiting
    </th>
    <td>
	Generic SIP dialog level support for subscribing SIP
	event packages and receiving notifications for them. Support for
	refreshing the subscriptions before expiration when needed and
	terminating subscriptions on request.
    </td>
    <td>
	- Generating subscriptions for "message-summary" event
	- Processing notifications for "message-summary" event
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3856: Presence
    </th>
    <td>
	Generic SIP dialog level support for subscribing SIP event packages
	and receiving notifications for them. Support for refreshing the
	subscriptions before expiration when needed and terminating
	subscriptions on request.
			
	Note: Usage of pres: URI is supported only if the next hop URI to
	where to send SUBSCRIBE is a SIP URI (e.g. of outbound proxy). 
	Resolving of pres: URIs by DNS is not supported.
    </td>
    <td>
	- Generating subscriptions for "presence" event
	- Processing notifications for "presence" event
			
	Handling of notified presence information
	Handling of notified subscription states
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3890: TIAS
    </th>
    <td>
	Generic support for bandwidth modifiers and attribute lines that
	conform SDP syntax
    </td>
    <td>
	- Generating or processing TIAS bandwidth modifiers
	- Generating or processing the maxprate attribute lines
    </td>
</tr>

<tr valign=top>
    <th align="left">
	@RFC3959: early-session
    </th>
    <td>
	Early-session value can be used within Content-Disposition,
	Supported and Require headers.
    </td>
    <td>
	- Generating of Content-Disposition, Supported and Require
	- Handling of multipart bodies with early and session SDP
    </td>
</tr>


*/