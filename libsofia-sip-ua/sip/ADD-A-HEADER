Description of Adding a SIP Header to Sofia SIP
===============================================

by Pekka Pessi (2002-08-16, updated 2005-10-05)

In the text below, we use "Example" header as our example with following
ABNF:

   sip-example = "Example" COLON 1*DIGIT

There are two ways to extend your parser.


* Write parsing tests for your new headers in torture_sip.c...

  - Add all relevant parsing/processing cases you can think of
    at the end of function sip_header_test() or add a testing
    function of your own.

IF YOUR HEADER IS A STANDARD ONE:

  * In <sip.h>, add:

  - Add typedefs to the header structures.

    The typedefs to ordinary headers are also in more or less alphabetic
    order after typedef of sip_unknown_t. You should add a typedef line
    like this:

     typedef struct sip_example_s sip_example_t;
	
    Note that the typedefs are documented together with the
    implementation in the .c file.

    - Add field to the sip_t structure (struct sip_s)
      - remember to add a comment after field for AWK script:
        sip_example_t *sip_example; /**< Example */
      - NOTE: the AWK script msg_parser.awk automatically creates the default
        prototypes and tags for the newly created header, when the entry in
        sip_t structure is formatted like to the example above

IF YOUR HEADERS ARE NON-STANDARD:

    - Create a header template for your header just like sip_rfc2543.h.in,
      e.g, sip_example.h.in:

---8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<---
/**@file sip_example.h.in
 *
 * Template for <sip_example.h>.
 */

#ifndef SIP_EXAMPLE_H 
/** Defined when <sip_example.h> has been included. */
#define SIP_EXAMPLE_H 

/**@file sip_example.h 
*
 * @brief Example header.
 *
 * #AUTO#
 *
 * @author Pekka Pessi <Pekka.Pessi@nokia.com>.
 *
 * @date Created: Fri May 27 18:40:38 EEST 2005 ppessi
 */

#ifndef SIP_H
#include <sip.h>
#endif

/**@ingroup sip_also
 * @brief Structure for @b Also header.
 */
struct sip_also_s
{
  sip_common_t   also_common[1];    /**< Common fragment info */
  sip_also_t    *also_next;	    /**< Link to next Also header */
  char const    *also_display;	    /**< Display name */
  url_t          also_url[1];	    /**< URL */
};

typedef struct sip_also_s           sip_also_t;
typedef sip_generic_t	     	    sip_hide_t;
typedef sip_auth_t	     	    sip_encryption_t;
typedef sip_auth_t	     	    sip_response_key_t;

struct sip_example_dummy_structure {
  /* === Headers start here */
  sip_also_t *sip_also;                                  /**< Also */
  sip_hide_t *sip_hide;                                  /**< Hide */
  sip_encryption_t *sip_encryption;                /**< Encryption */
  sip_response_key_t *sip_response_key;          /**< Response-Key */
  /* === Headers end here */
};


#endif /** !defined(SIP_EXAMPLE_H) */
--->8---->8---->8---->8---->8---->8---->8---->8---->8---->8---->8---->8---

    - Add a makefile rule 

$s/sip_example.h: $s/sip_example.h.in
	${AWK} -f ${sofiaexecdir}/msg_parser.awk module=sip PR=$@ \
		NO_FIRST=1 NO_LAST=1 \
		TEMPLATE1=$i/sip_hclasses.h.in \
		TEMPLATE2=$i/sip_protos.h.in \
		TEMPLATE3=$i/sip_tag.h.in \
		$s/sip_example.h.in

$s/sip_example_tag.c: $s/sip_example_tag.c.in $s/sip_example.h.in
	${AWK} -f ${sofiaexecdir}/msg_parser.awk module=sip PR=$@ \
		NO_FIRST=1 NO_LAST=1 \
		$s/sip_example.h.in


  - Add the actual header structure:

    The header structure would look like below. The first field MUST be a
    sip_common_t structure, second field MUST be a pointer to next header
    with same name. As a convention, if there can be only one header field
    of this kind, the type of the "next" pointer is sip_error_t.

    The fields representing the header value are located after the mandatory
    fields, usually in the order they are present in the header contents. In
    this case, the Example header consist of a 32-bit integer:

       /**@ingroup sip_example
        * @brief Structure for Example header.
        */
       struct sip_example_s {
         sip_common_t   ex_common[1];	    /**< Common fragment info. */
         sip_error_t   *ex_next;	    /**< Link to next (dummy). */
         unsigned long  ex_value;	    /**< Value of example. */
       };


* Add implementation in a suitable ".c" file
  - For an simple example, see implementation of Date header in sip_basic.c
  - Add a documentation group with @defgroup
  - Document the typedef 
  - Add header class structure
  - Add parsing and printing functions:
    + sip_example_d(), sip_example_e()
  - Add functions used when copying the header structure:
    + sip_example_dup_xtra(), sip_example_dup_one()

* If you added a .c file, add to the Makefile.am

* run "make check" after you are ready 
